{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","city","photo","age","phone","react_default","a","createElement","style","width","className","alt","src","concat","CardList","cardComponent","users","map","user","i","components_Card","key","region","SearchBox","searchChange","aria-label","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","count","updateCount","_this","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestUsers","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","toLocaleLowerCase","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","search","request","dispatch","event","type","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateUsers","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc70019c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, city, photo, age, phone }) => {\r\n  return (\r\n    <div style={{ width: \"25%\" }} className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${email}?size=100x100`} />\r\n      <div>\r\n        <h4 >Name: {name}</h4>\r\n        <p> {email}</p>\r\n        <p> Tel: {phone}</p>\r\n        <p>Country: {city}</p>\r\n        <p>Age: {age}</p>\r\n        <img alt='women' src={`${photo}`} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({users}) => {\r\n\r\n    const cardComponent = users.map((user,i)=>{\r\n            return (\r\n            <Card \r\n               key={i}\r\n              \r\n              name={user.name}\r\n              email={user.email}\r\n              city={user.region}\r\n              age={user.age}\r\n              photo = {user.photo}  \r\n              phone = {user.phone}  \r\n            />\r\n            )\r\n        })\r\n    return ( \r\n        <div>\r\n           \r\n            {cardComponent}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    return ( \r\n        <div className=\"pa2\">\r\n            <input\r\n            aria-label = \"Search robots\"\r\n            className=\"pa2 ba b--green bg-lightest-blue\"\r\n            placeholder = \"search robots\"\r\n            onChange={searchChange}\r\n            />\r\n            \r\n\r\n            \r\n            \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return ( \r\n        <div style={{overflowY:'scroll', border: '2px solid black', height: '490px'}}>\r\n            {props.children}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n   \r\n        state = { \r\n            hasError: false\r\n         }\r\n   \r\n         componentDidCatch(error, info) {\r\n             this.setState({\r\n                 hasError: true\r\n             })\r\n         }\r\n    render() { \r\n        if(this.state.hasError) {\r\n            return <h1> oops.That is not good</h1>\r\n        } \r\n        return  this.props.children\r\n        \r\n    }\r\n}\r\n \r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\n\r\nclass CounterButton extends Component {\r\n  \r\n  state = {\r\n      count: 0\r\n  }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n       if(this.state.count!== nextState.count) {\r\n           return true\r\n       }\r\n       return false\r\n    }\r\n  updateCount = () => {\r\n    //   this.nextState({\r\n    //       count: this.state.count +1\r\n    //   })\r\n    this.setState(state=>{\r\n        return {count: state.count+1}\r\n    })\r\n  }\r\n    render() { \r\n        return ( \r\n            <button \r\n            color={this.props.color}\r\n            onClick = {this.updateCount}>\r\n            Count: {this.state.count}\r\n            </button>\r\n         );\r\n    }\r\n}\r\n \r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n  \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n       \r\n       return false\r\n    }\r\n  \r\n    render() { \r\n        return ( \r\n            <div> \r\n            <h1 className=\"f2\"> Robofriends </h1>\r\n            <CounterButton  color = \"red\"/>\r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default Header;","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nclass App extends Component {\r\n\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestUsers()\r\n  }\r\n\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, users, isPending } = this.props;\r\n    const filteredRobots = users.filter(users => {\r\n      return users.name\r\n        .toLowerCase()\r\n        .includes(searchField.toLocaleLowerCase());\r\n    });\r\n\r\n    return isPending ? (\r\n      <h1 className=\"f1 tc\"> Loading </h1>\r\n    ) : (\r\n        <div className=\"tc\">\r\n          <Header />\r\n          <SearchBox searchChange={onSearchChange} />\r\n\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList users={filteredRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.search.searchField,\r\n    users: state.request.users,\r\n    isPending: state.request.isPending,\r\n    error: state.request.error\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => {\r\n      dispatch(setSearchField(event.target.value))\r\n    },\r\n    onRequestUsers: () => {\r\n      dispatch(requestRobots())\r\n    }\r\n  }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n\r\n    fetch(\"https://uinames.com/api/?ext&amount=55&region=poland&gender=female\")\r\n        .then(response => response.json()).then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data })).catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {\r\n                searchField: action.payload\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateUsers = {\r\n    isPending: false,\r\n    users: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateUsers, action = {}) => {\r\n    switch (action.type) {\r\n\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { users: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","\nimport React from 'react';\nimport {whyDidYouUpdate} from 'why-did-you-update';\n\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n// const logger = createLogger();\nconst rootReducer = combineReducers({\n    search: searchRobots,\n    request: requestRobots\n})\n\nif (process.env.NODE_ENV !== 'production') {\n  \n  whyDidYouUpdate(React);\n}\n\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n\nserviceWorker.unregister();"],"sourceRoot":""}